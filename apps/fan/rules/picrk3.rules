sub rk3_everything{
   my ($p0, $p1, $c, $b, $p4) = @_;
   my $p2 =  $c->dim;
   my $p3 = $b->dim;
   my $pi = rk3_build_pi($p0,$p1,$p2,$p3,$p4,$c, $b);
   my $tempting = rk3_build_temptings($p0,$p1,$p2,$p3,$p4);
   my @a = intersection_approach($tempting, transpose(new Matrix<Rational>($pi)));
   my @bounded = grep($_->BOUNDED, @a);
   my @lines = grep(!$_->BOUNDED, @a);
   my @lpts = map($_->LATTICE_POINTS, @bounded);
   @lpts = map(@$_, @lpts);
   my $tmp = new Set<Vector<Integer>>(@lpts);
   print $tmp->size;
   @lpts = @$tmp;
   foreach my $line (@lines){
      @lpts = grep(!$line->contains($_), @lpts);
      print "Dim: ", $line->DIM,"\n";
      print "LinDim: ", $line->LINEALITY_DIM,"\n";
      print "Gens:\n",$line->LATTICE_POINTS_GENERATORS->[0];
      print "Direction:\n", $line->LINEALITY_SPACE;
      print "------------------------------------------------\n";
   }
   my $lpts = new Matrix(@lpts);
   print "Isolated points:\n", $lpts, "\n";
   my $canonical = ones_matrix(1,$lpts->rows) * $lpts;
   $canonical = (new Rational(2,($lpts->rows)))*$canonical;
   print  "-Canonical:", $canonical, "\n";
}

#this does not work properly yet. It is not used anywhere so far, so I guess I will just leave it here and repair it sometime.   ERROR: Shared module compilation failed; most likely due to a type mismatch.
sub group_lines{
   my (@lines) = @_;
   my @result;
   my @directions = map($_->LINEALITY_SPACE, @lines);
   # this makes the directions unique!
   @directions = @{new Set<Matrix>(@directions)};
   foreach my $direction (@directions){
      my @dlines = grep($_->LINEALITY_SPACE==$direction,@lines);
      my $pts = zero_matrix(0,4);
      foreach my $line (@dlines){
         $pts = $pts / $line->LATTICE_POINTS_GENERATORS->[0];
      }
      $pts =  new Matrix( new Set<Vector>(@{$pts}));
      my $p = new Polytope(POINTS=>$pts);
      if ($p->N_LATTICE_POINTS == $pts->rows){
         $l = new Polytope(POINTS => $pts/$direction);
         push @result, $l;
      }
   }
   return @result;
}

# this should be a small routine, that for given data gives all 
# the vertices of the M(R) and give the cones represented by rays
# as well as by inequalities
sub rk3_build_maculate_cones {
   my ($p0,$p1,$c,$b,$p4) = @_;
   
}

# subroutine to build the vertex of the maculate region M(R)
sub rk3_maculate_vertex_for_tempting {
   my ($p0,$p1,$c,$b,$p4, $R) = @_;
   my $signs = -(ones_vector<Rational>(5));
   for (my $i=0;  $i < $R->size; $i++) {
      $signs->[$R->[$i]] = 0;
   }
   my $p2 = $c->dim;
   my $p3 = $b->dim;
   my $result = $signs->[0] * ((zero_matrix<Rational>(2, $p0)) / (ones_vector<Rational>($p0)));
   $result = $result | $signs->[1] * (((zero_matrix<Rational>(1,$p1)) / -(ones_vector<Rational>($p1))) / zero_vector<Rational>($p1));
   $result = $result | $signs->[2] * (((ones_matrix<Rational>(1,$p2)) / zero_vector<Rational>($p2)) / -$c);
   $result = $result | $signs->[3] * ((ones_matrix<Rational>(2,$p3)) / -$b);
   $result = $result | $signs->[4] * ((zero_matrix<Rational>(1,$p4)) / ones_matrix<Rational>(2, $p4));
   my $eins = ones_vector<Rational>($p0+$p1+$p2+$p3+$p4);
   $result = $result * $eins;
   return $result;
}

# subroutine to build the matrix of rays for the cone sigma_{R}
# here $R is not the real tempting subset, but only consists of numbers from 0 to 4.
sub rk3_build_cone_for_tempting {
   my ($p0,$p1,$c,$b,$p4, $R) = @_;
   my $signs = -(ones_vector<Rational>(5));
   for (my $i=0;  $i < $R->size; $i++) {
      $signs->[$R->[$i]] = 1;
   }
   my $p2 = $c->dim;
   my $p3 = $b->dim;
   my $result = $signs->[0] * ((zero_matrix<Rational>(2, $p0)) / (ones_vector<Rational>($p0)));
   $result = $result | $signs->[1] * (((zero_matrix<Rational>(1,$p1)) / -(ones_vector<Rational>($p1))) / zero_vector<Rational>($p1));
   $result = $result | $signs->[2] * (((ones_matrix<Rational>(1,$p2)) / zero_vector<Rational>($p2)) / -$c);
   $result = $result | $signs->[3] * ((ones_matrix<Rational>(2,$p3)) / -$b);
   $result = $result | $signs->[4] * ((zero_matrix<Rational>(1,$p4)) / ones_matrix<Rational>(2, $p4));
   #return transpose($result);
   my $C = new Cone(INPUT_RAYS=>transpose($result));
   return $C;
}


# subroutine for above. Compute the stuff for a given tempting subset of the rays.
sub rk3_build_maculate_region_for_tempting{
   my ($p0,$p1,$c,$b,$p4, $R) = @_;
   my $C = rk3_build_cone_for_tempting($p0,$p1,$c,$b,$p4, $R);
   my $v = rk3_maculate_vertex_for_tempting($p0,$p1,$c,$b,$p4, $R);

}



sub rk3_build_pi {
   my($p0, $p1, $p2, $p3, $p4, $c, $b) = @_;
   my $result = (zero_matrix<Rational>(2, $p0)) / (ones_vector<Rational>($p0));
   $result = $result | (((zero_matrix<Rational>(1,$p1)) / -(ones_vector<Rational>($p1))) / zero_vector<Rational>($p1));
   $result = $result | (((ones_matrix<Rational>(1,$p2)) / zero_vector<Rational>($p2)) / -$c);
   $result = $result | ((ones_matrix<Rational>(2,$p3)) / -$b);
   $result = $result | ((zero_matrix<Rational>(1,$p4)) / ones_matrix<Rational>(2, $p4));
   return $result;
}

sub rk3_build_tempting_inner{
   my($X0, $X1, $total) = @_;
   my @result = ($X0+$X1, $total-($X0+$X1));
   return @result;
}

sub rk3_build_temptings {
   my($p0, $p1, $p2, $p3, $p4) = @_;
   my $X0 = new Set<Int>(0..$p0-1);
   my $start = $p0;
   my $X1 = new Set<Int>($start..($start+$p1-1));
   $start += $p1;
   my $X2 = new Set<Int>($start..($start+$p2-1));
   $start += $p2;
   my $X3 = new Set<Int>($start..($start+$p3-1));
   $start += $p3;
   my $X4 = new Set<Int>($start..($start+$p4-1));
   $start += $p4;
   my $total = new Set<Int>(0..($start-1));
   my @result = rk3_build_tempting_inner($X0, $X1, $total);
   @result = (@result, rk3_build_tempting_inner($X2, $X1, $total));
   @result = (@result, rk3_build_tempting_inner($X2, $X3, $total));
   @result = (@result, rk3_build_tempting_inner($X4, $X3, $total));
   @result = (@result, rk3_build_tempting_inner($X4, $X0, $total));
   push @result, $total;
   push @result, new Set<Int>();
   return new Array<Set<Int>>(@result);
}
