# @topic category methods/any/Algebraic Geometry
# Properties from algebraic geometry.


object TDivisor {

   property IMMACULATE : Bool;

}

object NormalToricVariety {

   # @category Algebraic Geometry
   # Every divisor on a toric variety may be written as the difference of two
   # nef divisors. This method returns such a decomposition. The decomposition
   # is not unique.
   # @param TDivisor The divisor to be decomposed
   # @return perl Array of two TDivisors whose difference is linearly
   #  equivalent to the given divisor.
   user_method decompose_into_nef_pair(TDivisor){
      my ($this, $d) = @_;
      my ($v1, $v2) = internal_decompose_into_nef($this->RATIONAL_DIVISOR_CLASS_GROUP->PROJECTION, $this->RATIONAL_DIVISOR_CLASS_GROUP->LIFTING, $this->NEF_CONE->FACETS, $d->COEFFICIENTS);
      
      # Construct actual nef divisors, assign to toric variety.
      my $div1 = $this->DIVISOR(COEFFICIENTS=>$v1);
      my $div2 = $this->DIVISOR(COEFFICIENTS=>$v2);
      return ($div1, $div2);
   }

   rule DIVISOR.IMMACULATE : DIVISOR.COEFFICIENTS, NEF_CONE, RATIONAL_DIVISOR_CLASS_GROUP.PROJECTION, RATIONAL_DIVISOR_CLASS_GROUP.LIFTING {
      # Get coefficients
      my ($v1, $v2) = internal_decompose_into_nef($this->RATIONAL_DIVISOR_CLASS_GROUP->PROJECTION, $this->RATIONAL_DIVISOR_CLASS_GROUP->LIFTING, $this->NEF_CONE->FACETS, $this->DIVISOR->COEFFICIENTS);
      # Little workaround, since computing properties of the divisors is forbidden.
      my $div1 = $this->DIVISOR(COEFFICIENTS=>$v1, temporary);
      my $div2 = $this->DIVISOR(COEFFICIENTS=>$v2, temporary);
      $this->DIVISOR->IMMACULATE = is_immaculate_pair($div1->SECTION_POLYTOPE, $div2->SECTION_POLYTOPE);
   }

   # @category Algebraic Geometry
   # Returns the immaculate locus of a toric variety, i.e. the subset of all
   # divisor classes that are immaculate.
   user_method immaculate_locus {
      my($this) = @_;
      my $rho_star = $this->RAYS;
      my $pi = $this->RATIONAL_DIVISOR_CLASS_GROUP->PROJECTION;
      my @prob = find_temptings($this);
      my $A = new Array<Set<Int>>(@prob);
      my @result = immaculate_locus_via_intersection($A, new Matrix<Rational>($pi));
      return @result;
   }

}

sub internal_decompose_into_nef {
   my($projection, $lifting, $nefFacets, $coeffs) = @_;
   # Decompose divisor into two nef divisors:
   # Project to class (Picard) group
   my $pi = transpose($projection);
   my $pv = $pi * $coeffs;
   my $n = $pv->dim;
   # Construct polytope of all ($pv1, $pv2) with
   # - $pv1, $pv2 nef
   # - $pv1 - $pv2 = $coeffs
   my $B = (-$pv) | unit_matrix($n) | -unit_matrix($n);
   $B = dense($B);
   my $AA = zero_vector(2*$nefFacets->rows) | ($nefFacets / zero_matrix($nefFacets->rows, $nefFacets->cols));
   my $AAA = $AA | (zero_matrix($nefFacets->rows, $nefFacets->cols) / $nefFacets);
   my $P = new Polytope(INEQUALITIES=>$AAA, EQUATIONS=>$B);
   # Extract one solution
   my $pvv = new Vector<Rational>($P->LATTICE_POINTS_GENERATORS->[0]->[0]);
   my $pv1 = $pvv->slice(range(1,$pv->dim));
   my $pv2 = $pvv->slice(range(1+$pv->dim, 2*$pv->dim));
   # Lift $pv1 and $pv2 to Weil divisor group
   my $lift = transpose($lifting);
   my $v1 = $lift * $pv1;
   my $v2 = $lift * $pv2;
   return ($v1, $v2);
}

# @category Producing a normal toric variety
# Produces a smooth normal toric variety of Picard rank 2 with the Kleinschmidt construction.
# @param Int d The dimension (equal to number of rays - 2).
# @param Vector<Int> a The Kleinschmidt parameters.
# @return NormalToricVariety
user_function kleinschmidt( Int , Vector<Int> ) {
   # The variable names are chosen according to the Kleinschmidt construction in:
   #
   # Peter Kleinschmidt. A classification of toric varieties with few generators.
   # Aequationes Math., 35(2-3):254â€“266, 1988.
   my($d, $aInt) = @_;
   my $a = new Vector<Rational>($aInt);
   $d > 0 or die("Expected a positive integer d.");
   my $r = $a->dim();
   my $s = $d - $r + 1;
   my $Urays = (unit_matrix($r) | -ones_matrix($r,1))/zero_matrix($s-1,$r+1);
   my $vs = $a | (-ones_vector($s-1));
   my $Vrays = (zero_matrix($r,$s-1) / unit_matrix($s-1)) | $vs;
   my $groundSet = new Set<Int>(0..($r+$s));
   my @mc = ();
   for(my $i=0; $i<$r+1; $i++){
      for(my $j=$r+1; $j<=$r+$s; $j++){
         push @mc, $groundSet - $i - $j;
      }
   }
   my $rays = new Matrix($Urays | $Vrays);
   return new NormalToricVariety(INPUT_RAYS=>transpose($rays), INPUT_CONES=>\@mc);
}


